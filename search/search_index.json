{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#source-file-structure","title":"Source File Structure","text":""},{"location":"#file-comments","title":"File Comments","text":"<p>Comments describing the contents of a source file are optional. They are discouraged for files that contain only a single abstraction (such as a class declaration)\u2014in those cases, the documentation comment on the abstraction itself is sufficient and a file comment is only present if it provides additional useful information. File comments are allowed for files that contain multiple abstractions in order to document that grouping as a whole.</p>"},{"location":"#import-statements","title":"Import Statements","text":"<p>A source file imports exactly the declarations that it needs\u2014nothing more and nothing less. Do not rely on transitive imports (e.g., that SwiftUI also imports Foundation).</p>"},{"location":"#declaration-level-imports","title":"Declaration-Level Imports","text":"<p>Imports of individual declarations (struct, enum, class, etc.) are required over imports of whole modules. This practice ensures that dependencies between modules are explicit and granular. * Exception (Whole-Module Imports): Importing an entire module is permitted for foundational system frameworks (e.g., SwiftUI, Foundation) or when a file uses a substantial number of declarations from a single module, making individual imports impractical and less readable.</p>"},{"location":"#placement-and-formatting","title":"Placement and Formatting","text":"<p>Import statements are the first non-comment tokens in a source file. They are never line-wrapped.</p> <p>Imports should be grouped and sorted. The standard grouping order is:</p> <ul> <li>Apple frameworks (e.g., SwiftUI, Foundation)</li> <li>Third-party modules (e.g., TheComposableArchitecture, Kingfisher)</li> <li>Project-internal modules (e.g., AuthService, DesignSystem)</li> </ul> <pre><code>import AppError\nimport AuthService\nimport SomeCore\nimport enum SomeViews.SomeViewAction\nimport struct SomeViews.SomeViewState\n</code></pre>"},{"location":"#type-and-member-organization","title":"Type and Member Organization","text":"<p>This rule covers two aspects of organization: how types are arranged in files, and how members are ordered within a type.</p>"},{"location":"#file-organization","title":"File Organization","text":"<p>Group related top-level types in the same source file to improve cohesion and readability. This is encouraged for tightly coupled components, such as: * A protocol and the primary class that conforms to it. * A public type and its exclusive fileprivate helpers (e.g., error enums or small structs).</p> <p>However, large, complex, or unrelated types must reside in their own separate files.</p>"},{"location":"#member-ordering","title":"Member Ordering","text":"<p>To ensure consistency and predictability, the ordering of members within a type (class, struct, enum) must follow a strict, logical sequence. This makes code easier to navigate, review, and maintain.</p> <p>The required order is as follows:</p> <ul> <li> <p>Type Aliases and Nested Types: typealias, nested enum, struct, class.</p> </li> <li> <p>Properties: Stored and computed properties, grouped by access level (e.g., public, internal, private). Constants (let) should precede variables (var).</p> </li> <li> <p>Initializers: All init methods, including required and convenience initializers.</p> </li> <li> <p>Public Methods: The primary public interface of the type.</p> </li> <li> <p>Private and Fileprivate Methods: Helper methods, often prefixed with private or fileprivate, which support the public interface.</p> </li> </ul> <pre><code>struct ProfileProgressView: View {\n    typealias Action = () -&gt; Void\n\n    let progress: Int\n    let action: Action?\n    var buttonForegroundStyle: Color = .constant(.white)\n\n    var body: some View {\n        //...\n    }\n\n    func buttonForegroundStyle(_ color: Color) -&gt; Self {\n        //...\n    }\n\n    private func progressView(value: CGFloat) -&gt; some View {\n        //...\n    }\n}\n</code></pre>"},{"location":"#overloaded-declarations","title":"Overloaded Declarations","text":"<p>When a type has multiple initializers or subscripts, or a file/type has multiple functions with the same base name (though perhaps with different argument labels), and when these overloads appear in the same type or extension scope, they appear sequentially with no other code in between.</p>"},{"location":"#general-formatting","title":"General Formatting","text":""},{"location":"#column-limit","title":"Column Limit","text":"<p>Swift code has a column limit of 200 characters. Except as noted below, any line that would exceed this limit must be line-wrapped as described in Line-Wrapping.</p> <p>Exceptions: * Lines where obeying the column limit is not possible without breaking a meaningful unit of text that should not be broken (for example, a long URL in a comment). * <code>import</code> statements. * Code generated by another tool.</p>"},{"location":"#braces","title":"Braces","text":"<p>In general, braces follow Kernighan and Ritchie (K&amp;R) style for non-empty blocks with exceptions for Swift-specific constructs and rules: * There is no line break before the opening brace (<code>{</code>).</p> <ul> <li> <p>There is a line break after the opening brace (<code>{</code>), except in closures, where the signature of the closure is placed on the same line as the curly brace, if it fits, and a line break follows the <code>in</code> keyword.</p> </li> <li> <p>empty blocks may be written as <code>{}</code>.</p> </li> <li> <p>There is a line break before the closing brace (<code>}</code>), or it completes an empty block.</p> </li> <li> <p>There is a line break after the closing brace (<code>}</code>), if and only if that brace terminates a statement or the body of a declaration. For example, an <code>else</code> block is written <code>} else {</code> with both braces on the same line.</p> </li> </ul>"},{"location":"#one-statement-per-line","title":"One Statement Per Line","text":"<p>There is at most one statement per line, and each statement is followed by a line break.</p> <p>Exception: A line may end with a block that contains zero or one statement. This is often used for concise control flow or simple closures. <pre><code>switch someEnum {\n    case .first: 5\n    case .second: 10\n    case .third: 20\n}\n\nlet squares = numbers.map { $0 * $0 }\n\nvar someProperty: Int { otherObject.somethingElse() }\n</code></pre></p>"},{"location":"#clarification-context-matters-ui-vs-logic","title":"Clarification: Context Matters (UI vs. Logic) \ud83d\udca1","text":"<p>While the compact, single-line form is permitted by the general rule, its application should be contextual. For the sake of readability and maintainability, we distinguish between UI code and logic/flow control code.</p>"},{"location":"#in-ui-code-swiftui-views-uikit-view-configuration","title":"\u274c In UI Code (SwiftUI Views, UIKit View Configuration)","text":"<p>In declarative UI code, readability is the highest priority. The structure of the code should mirror the structure of the UI itself. Therefore, single-line blocks are not allowed for UI components, as they can obscure the view hierarchy. Always use multi-line formatting for clarity.</p> <p>AVOID</p> <pre><code>HStack {\n    Text(\"Welcome\").font(.title); Button(\"Log Out\") { viewModel.logOut() }\n}\n</code></pre> <p>GOOD</p> <pre><code>HStack {\n  Text(\"Welcome\")\n      .font(.title)\n\n  Button(\"Log Out\") {\n      viewModel.logOut()\n  }\n}\n</code></pre>"},{"location":"#in-logic-code-flowcoordinatorviewmodelservice-modules","title":"\u2705 In Logic Code (Flow/Coordinator/ViewModel/Service Modules)","text":"<p>In imperative logic code, the single-line format is allowed and often preferred for simple, self-contained operations. This is common for control flow statements (guard, if), cleanup (defer), or simple transformations (map, filter). It helps reduce vertical space and keeps simple logic self-contained.</p>"},{"location":"#line-wrapping","title":"Line-Wrapping","text":""},{"location":"#function-declarations","title":"Function Declarations","text":"<p>Function declarations are wrapped when they exceed the maximum line length. The wrapping follows a consistent, cascading indentation style to maintain readability.</p>"},{"location":"#arguments-and-closing-parenthesis","title":"Arguments and Closing Parenthesis","text":"<p>When a function's argument list is wrapped, the following rules apply: * Each argument must be on its own line. * Wrapped arguments are indented with a single +4 space indent. * The closing parenthesis ) must be placed on a new line, aligned with the func keyword.</p> <pre><code>public protocol ExampleDelegate {\n    func example(\n        _ example: Example,\n        someValue: SomeValue\n    )\n}\n</code></pre>"},{"location":"#generic-parameters-and-where-clauses","title":"Generic Parameters and where Clauses","text":"<p>Generics and their constraints have specific wrapping rules to preserve clarity. * If the generic parameter list (&lt;...&gt;) causes the function's first line to exceed 60 characters, the generic parameters must be wrapped. Each parameter is placed on a new line with a +4 indent. The closing &gt; is placed on its own line after the last parameter. * The where keyword is placed on the same line as the return type. If the constraints themselves need to be wrapped, the first constraint remains with where, and subsequent constraints are placed on new lines, aligned under the first.</p> <pre><code>// Generic parameters and 'where' clause are wrapped\npublic func find&lt;\n    Element: Equatable,\n    CollectionType: Collection\n&gt;(\n    element: Element,\n    in collection: CollectionType\n) -&gt; CollectionType.Index? where CollectionType.Element == Element,\n                                 CollectionType.Index: Hashable {\n    // ...\n}\n</code></pre>"},{"location":"#type-and-extension-declarations","title":"Type and Extension Declarations","text":"<p>The examples below apply equally to <code>class</code>, <code>struct</code>, <code>enum</code>, <code>extension</code>, and <code>protocol</code> (with the obvious exception that all but the first do not have superclasses in their inheritance list, but they are otherwise structurally similar).</p> <pre><code>struct MyClass: MySuperclass,\n               MyProtocol,\n               SomeoneElsesProtocol,\n               SomeFrameworkProtocol {\n    // ...\n}\n\nstruct MyContainer&lt;ViewModel: BaseViewModel&gt;: MyContainerSuperclass,\n                                             MyContainerProtocol,\n                                             SomeoneElsesContainerProtocol,\n                                             SomeFrameworkContainerProtocol {\n    // ...\n}\n\nstruct MyContainer&lt;ViewModel: BaseViewModel&gt;: MyContainerSuperclass,\n                                             MyContainerProtocol,\n                                             SomeoneElsesContainerProtocol,\n                                             SomeFrameworkContainerProtocol where BaseCollection: Collection {\n    // ...\n}\n\nstruct MyContainer&lt;ViewModel: BaseViewModel&gt;: MyContainerSuperclass,\n                                             MyContainerProtocol,\n                                             SomeoneElsesContainerProtocol,\n                                             SomeFrameworkContainerProtocol where BaseCollection: Collection,\n                                                                                  BaseCollection.Element: Equatable,\n                                                                                  BaseCollection.Element: SomeOtherProtocolOnlyUsedToForceLineWrapping {\n    // ...\n}\n</code></pre>"},{"location":"#function-calls","title":"Function Calls","text":"<p>When a function call is line-wrapped, each argument is written on its own line, indented +4 from the original line.</p> <p>As with function declarations, if the function call terminates its enclosing statement and ends with a closing parenthesis (<code>)</code>) (that is, it has no trailing closure), then the parenthesis may be placed either on the same line as the final argument or on its own line.</p> <pre><code>let index = index(\n    of: veryLongElementVariableName,\n    in: aCollectionOfElementsThatAlsoHappensToHaveALongName)\n</code></pre> <pre><code>let index = index(\n    of: veryLongElementVariableName,\n    in: aCollectionOfElementsThatAlsoHappensToHaveALongName\n)\n</code></pre> <p>If the function call ends with a trailing closure and the closure\u2019s signature must be wrapped, then place it on its own line and wrap the argument list in parentheses to distinguish it from the body of the closure below it.</p> <pre><code>someAsynchronousAction.execute(withDelay: howManySeconds, context: actionContext) { context in\n    doSomething(withContext: context)\n}\n</code></pre>"},{"location":"#horizontal-whitespace","title":"Horizontal Whitespace","text":"<p>Terminology note: In this section, horizontal whitespace refers to interior space. These rules are never interpreted as requiring or forbidding additional space at the start of a line.</p> <p>Beyond where required by the language or other style rules, and apart from literals and comments, a single Unicode space also appears in the following places only: 1. Separating any reserved word starting a conditional or switch statement (such as <code>if</code>, <code>guard</code>, <code>while</code>, or <code>switch</code>) from the expression that follows it if that expression starts with an open parenthesis (<code>(</code>).</p> <p>GOOD</p> <pre><code>if (x == 0 &amp;&amp; y == 0) || z == 0 {\n    // ...\n}\n</code></pre> <p>AVOID</p> <pre><code>if(x == 0 &amp;&amp; y == 0) || z == 0 {\n    // ...\n}\n</code></pre> <ol> <li>Before any closing curly brace (<code>}</code>) that follows code on the same line, before any open curly brace (<code>{</code>), and after any open curly brace (<code>{</code>) that is followed by code on the same line.</li> </ol> <p>GOOD</p> <pre><code>let nonNegativeCubes = numbers.map { $0 * $0 * $0 }.filter { $0 &gt;= 0 }\n</code></pre> <p>AVOID</p> <pre><code>let nonNegativeCubes = numbers.map { $0 * $0 * $0 } .filter { $0 &gt;= 0 }\nlet nonNegativeCubes = numbers.map{$0 * $0 * $0}.filter{$0 &gt;= 0}\n</code></pre> <ol> <li> <p>On both sides of any binary or ternary operator, including the \u201coperator-like\u201d symbols described below, with exceptions noted at the end:</p> </li> <li> <p>The <code>=</code> sign used in assignment, initialization of variables/properties, and default arguments in functions.</p> </li> </ol> <p>GOOD</p> <pre><code>var x = 5\nfunc sum(_ numbers: [Int], initialValue: Int = 0) {\n    // ...\n}\n</code></pre> <p>AVOID</p> <pre><code>var x=5\nfunc sum(_ numbers: [Int], initialValue: Int=0) {\n    // ...\n}\n</code></pre> <ul> <li>The ampersand (<code>&amp;</code>) in a protocol composition type.</li> </ul> <p>GOOD</p> <pre><code>func sayHappyBirthday(to person: NameProviding &amp; AgeProviding) {\n    // ...\n}\n</code></pre> <p>AVOID</p> <pre><code>func sayHappyBirthday(to person: NameProviding&amp;AgeProviding) {\n    // ...\n}\n</code></pre> <ul> <li>The operator symbol in a function declaring/implementing that operator.</li> </ul> <p>GOOD</p> <pre><code>static func == (lhs: MyType, rhs: MyType) -&gt; Bool {\n    // ...\n}\n</code></pre> <p>AVOID</p> <pre><code>static func ==(lhs: MyType, rhs: MyType) -&gt; Bool {\n    // ...\n}\n</code></pre> <ul> <li>The arrow (<code>-&gt;</code>) preceding the return type of a function.</li> </ul> <p>GOOD</p> <pre><code>func sum(_ numbers: [Int]) -&gt; Int {\n    // ...\n}\n</code></pre> <p>AVOID</p> <pre><code>func sum(_ numbers: [Int])-&gt;Int {\n    // ...\n}\n</code></pre> <p>Exception: There is no space on either side of the dot (<code>.</code>) used to reference value and type members.</p> <p>GOOD</p> <pre><code>let width = view.bounds.width\n</code></pre> <p>AVOID</p> <pre><code>let width = view . bounds . width\n</code></pre> <p>Exception: There is no space on either side of the <code>..&lt;</code> or <code>...</code> operators used in range expressions.</p> <p>GOOD</p> <pre><code>for number in 1...5 {\n    // ...\n}\nlet substring = string[index..&lt;string.endIndex]\n</code></pre> <p>AVOID</p> <pre><code>for number in 1 ... 5 {\n    // ...\n}\nlet substring = string[index ..&lt; string.endIndex]\n</code></pre> <ol> <li>After, but not before, the comma (<code>,</code>) in parameter lists and in tuple/array/dictionary literals.</li> </ol> <p>GOOD</p> <pre><code>let numbers = [1, 2, 3]\n</code></pre> <p>AVOID</p> <pre><code>let numbers = [1,2,3]\nlet numbers = [1 ,2 ,3]\nlet numbers = [1 , 2 , 3]\n</code></pre> <ol> <li>After, but not before, the colon (<code>:</code>) in</li> <li>Superclass/protocol conformance lists and generic constraints.</li> </ol> <p>GOOD</p> <pre><code>struct HashTable: Collection {\n    // ...\n}\nstruct AnyEquatable&lt;Wrapped: Equatable&gt;: Equatable {\n    // ...\n}\n</code></pre> <p>AVOID</p> <pre><code>struct HashTable : Collection {\n    // ...\n}\nstruct AnyEquatable&lt;Wrapped : Equatable&gt; : Equatable {\n    // ...\n}\n</code></pre> <ul> <li>Function argument labels and tuple element labels.</li> </ul> <p>GOOD</p> <pre><code>let tuple: (x: Int, y: Int)\nfunc sum(_ numbers: [Int]) {\n    // ...\n}\n</code></pre> <p>AVOID</p> <pre><code>let tuple: (x:Int, y:Int)\nlet tuple: (x : Int, y : Int)\nfunc sum(_ numbers:[Int]) {\n    // ...\n}\nfunc sum(_ numbers : [Int]) {\n    // ...\n}\n</code></pre> <ul> <li>Variable/property declarations with explicit types.</li> </ul> <p>GOOD</p> <pre><code>let number: Int = 5\n</code></pre> <p>AVOID</p> <pre><code>let number:Int = 5\nlet number : Int = 5\n</code></pre> <ul> <li>Shorthand dictionary type names.</li> </ul> <p>GOOD</p> <pre><code>var nameAgeMap: [String: Int] = []\n</code></pre> <p>AVOID</p> <pre><code>var nameAgeMap: [String:Int] = []\nvar nameAgeMap: [String : Int] = []\n</code></pre> <ul> <li>Dictionary literals.</li> </ul> <p>GOOD</p> <pre><code>let nameAgeMap = [\"Ed\": 40, \"Timmy\": 9]\n</code></pre> <p>AVOID</p> <pre><code>let nameAgeMap = [\"Ed\":40, \"Timmy\":9]\nlet nameAgeMap = [\"Ed\" : 40, \"Timmy\" : 9]\n</code></pre> <ol> <li>At least two spaces before and exactly one space after the double slash (<code>//</code>) that begins an end-of-line comment.</li> </ol> <p>GOOD</p> <pre><code>let initialFactor = 2  // Warm up the modulator.\n</code></pre> <p>AVOID</p> <pre><code>let initialFactor = 2 //    Warm up the modulator.\n</code></pre> <ol> <li>Outside, but not inside, the brackets of an array or dictionary literals and the parentheses of a tuple literal.</li> </ol> <p>GOOD</p> <pre><code>let numbers = [1, 2, 3]\n</code></pre> <p>AVOID</p> <pre><code>let numbers = [ 1, 2, 3 ]\n</code></pre>"},{"location":"#horizontal-alignment","title":"Horizontal Alignment","text":"<p>Terminology note: Horizontal alignment is the practice of adding a variable number of additional spaces in your code with the goal of making certain tokens appear directly below certain other tokens on previous lines.</p> <p>Horizontal alignment is forbidden except when writing obviously tabular data where omitting the alignment would be harmful to readability. In other cases (for example, lining up the types of stored property declarations in a <code>struct</code> or <code>class</code>), horizontal alignment is an invitation for maintenance problems if a new member is introduced that requires every other member to be realigned.</p> <p>GOOD</p> <pre><code>struct DataPoint {\n    var value: Int\n    var primaryColor: UIColor\n}\n</code></pre> <p>AVOID</p> <pre><code>struct DataPoint {\n    var value:        Int\n    var primaryColor: UIColor\n}\n</code></pre>"},{"location":"#vertical-whitespace","title":"Vertical Whitespace","text":"<p>A single blank line appears in the following locations: 1. Between consecutive members of a type: properties, initializers, methods, enum cases, and nested types, except that: * A blank line is optional between two consecutive stored properties or two enum cases whose declarations fit entirely on a single line. Such blank lines can be used to create logical groupings of these declarations. * A blank line is optional between two extremely closely related properties that do not otherwise meet the criterion above; for example, a private stored property and a related public computed property. 2. Only as needed between statements to organize code into logical subsections. 3. Optionally before the first member or after the last member of a type (neither is encouraged nor discouraged). 4. Anywhere explicitly required by other sections of this document.</p> <p>Multiple blank lines are permitted, but never required (nor encouraged). If you do use multiple consecutive blank lines, do so consistently throughout your code base.</p>"},{"location":"#parentheses","title":"Parentheses","text":"<p>Parentheses are not used around the top-most expression that follows an <code>if</code>, <code>guard</code>, <code>while</code>, or <code>switch</code> keyword.</p> <p>GOOD</p> <pre><code>if x == 0 {\n    print(\"x is zero\")\n}\nif (x == 0 || y == 1) &amp;&amp; z == 2 {\n    print(\"...\")\n}\n</code></pre> <p>AVOID</p> <pre><code>if (x == 0) {\n    print(\"x is zero\")\n}\nif ((x == 0 || y == 1) &amp;&amp; z == 2) {\n    print(\"...\")\n}\n</code></pre> <p>Optional grouping parentheses are omitted only when the author and the reviewer agree that there is no reasonable chance that the code will be misinterpreted without them, nor that they would have made the code easier to read. It is not reasonable to assume that every reader has the entire Swift operator precedence table memorized.</p>"},{"location":"#formatting-specific-constructs","title":"Formatting Specific Constructs","text":""},{"location":"#non-documentation-comments","title":"Non-Documentation Comments","text":"<p>Non-documentation comments always use the double-slash format (<code>//</code>), never the C-style block format (<code>/* ... */</code>).</p>"},{"location":"#properties","title":"Properties","text":"<p>Local variables are declared close to the point at which they are first used (within reason) to minimize their scope.</p> <p>With the exception of tuple destructuring, every <code>let</code> or <code>var</code> statement (whether a property or a local variable) declares exactly one variable.</p> <p>GOOD</p> <pre><code>var a = 5\nvar b = 10\nlet (quotient, remainder) = divide(100, 9)\n</code></pre> <p>AVOID</p> <pre><code>var a = 5, b = 10\n</code></pre>"},{"location":"#switch-statements","title":"Switch Statements","text":"<ul> <li>In multi-line cases, case statements are aligned with switch (no extra indentation).</li> <li>In single-line cases, case statements are indented one level (+4 spaces) from switch.</li> <li>The body of a case in multi-line format is indented +4 spaces from the case.</li> <li>Use single-line case only if the body is short (\u2248 40 characters or less).</li> <li>The 40-character limit is approximate \u2014 developers may decide to switch to multi-line for better readability even with fewer characters.</li> </ul> <p>GOOD</p> <pre><code>switch self {\n    case .status: .congratulations(.status)\n    case .reward(let multiplier): \"\\(multiplier) \\(String.congratulations(.rewards))\"\n    case .coins(let value):  \"\\(value) \\(String.congratulations(.coins))\"\n}\n\nswitch action {\ncase .appeared, .error:\n    return update(for: state)\ncase .selected(let id):\n    return changeSelected(for: state, id: id)\ncase .close:\n    coordinator.perform(.close)\n}\n</code></pre> <p>AVOID</p> <pre><code>switch action {\n    case .appeared, .error:\n        return update(for: state)\n    case .selected(let id):\n        return changeSelected(for: state, id: id)\n    case .close:\n        coordinator.perform(.close)\n}\n\nswitch self {\ncase .status: .congratulations(.status)\ncase .reward(let multiplier): \"\\(multiplier) \\(String.congratulations(.rewards))\"\ncase .coins(let value):  \"\\(value) \\(String.congratulations(.coins))\"\n}\n</code></pre>"},{"location":"#enum-naming","title":"Enum Naming","text":"<p>The naming convention for enums depends on their role. The primary rule is to use singular names for enums that define a type, but plural names are acceptable when an enum is used as a namespace. The Main Rule: Singular for Types When an enum is used to define a type with distinct states or values, its name must be singular.</p> <p>Think of it this way: the type is Direction, and a variable of that type can hold one of its values, such as .north. We don't write let myDirection: Directions.</p> <p>GOOD</p> <pre><code>// An enum as a type representing one state out of several.\nenum NetworkState {\n    case connected\n    case disconnected\n    case connecting\n}\n\n// An enum as a type representing a specific choice.\nenum PaymentMethod {\n    case creditCard(String)\n    case cash\n    case crypto(address: String)\n}\n</code></pre> <p>AVOID</p> <pre><code>// Avoid plural names for type names.\nenum NetworkStates { ... }\n\nenum PaymentMethods { ... }\n</code></pre> <p>The Exception: Plural for Namespaces</p> <p>When a caseless enum is used as a namespace to group static constants, a plural name is appropriate and often preferred because it describes the group or collection of items stored within.</p> <p>GOOD</p> <pre><code>enum Constants {\n\n    enum Images: String, ImageKey {\n        case box\n        case congratulation\n        case coinsSpecial\n        case userPhotoPlaceholder\n\n        var bundle: Bundle? { .module }\n    }\n\n    enum Strings {\n\n        enum Levels: String, LevelsLocalizedKey {\n            case title = \"levels.title\"\n            case subtitle = \"levels.subtitle\"\n            case level = \"levels.level\"\n            case coinsTitle = \"levels.coins_text\"\n            case rewardsTitle = \"levels.rewards_title\"\n            case statusDescription = \"levels.status_description\"\n            case rewardDescription = \"levels.reward_description\"\n            case coinsDescription = \"levels.coins_description\"\n        }\n    }\n</code></pre>"},{"location":"#enum-cases","title":"Enum Cases","text":"<p>In general, there is only one <code>case</code> per line in an <code>enum</code>. The comma-delimited form may be used only when none of the cases have associated values or raw values, all cases fit on a single line, and the cases do not need further documentation because their meanings are obvious from their names.</p> <p>GOOD</p> <pre><code>public enum Token {\n    case comma\n    case semicolon\n    case identifier\n}\n\npublic enum Token {\n    case comma, semicolon, identifier\n}\n</code></pre> <p>AVOID</p> <pre><code>public enum Token {\n    case comma\n    case semicolon\n    case identifier(String)\n}\n\npublic enum Token {\n    case comma, semicolon, identifier(String)\n}\n</code></pre> <p>When an <code>enum</code> case does not have associated values, empty parentheses are never present.</p> <p>GOOD</p> <pre><code>public enum BinaryTree&lt;Element&gt; {\n    indirect case node(element: Element, left: BinaryTree, right: BinaryTree)\n    case empty\n}\n</code></pre> <p>AVOID</p> <pre><code>public enum BinaryTree&lt;Element&gt; {\n    indirect case node(element: Element, left: BinaryTree, right: BinaryTree)\n    case empty()\n}\n</code></pre> <p>The cases of an enum must follow a logical ordering that the author could explain if asked. If there is no obviously logical ordering, use a lexicographical ordering based on the cases\u2019 names.</p> <p>In the following example, the cases are arranged in numerical order based on the underlying HTTP status code. <pre><code>public enum HTTPStatus: Int {\n    case ok = 200\n    case badRequest = 400\n    case notAuthorized = 401\n    case paymentRequired = 402\n    case forbidden = 403\n    case notFound = 404\n    case internalServerError = 500\n}\n</code></pre> The following version of the same enum is less readable. Although the cases are ordered lexicographically, the meaningful groupings of related values has been lost. <pre><code>public enum HTTPStatus: Int {\n    case badRequest = 400\n    case forbidden = 403\n    case internalServerError = 500\n    case notAuthorized = 401\n    case notFound = 404\n    case ok = 200\n    case paymentRequired = 402\n}\n</code></pre></p>"},{"location":"#trailing-closures","title":"Trailing Closures","text":"<p>Functions should not be overloaded such that two overloads differ only by the name of their trailing closure argument. Doing so prevents using trailing closure syntax\u2014when the label is not present, a call to the function with a trailing closure is ambiguous.</p> <p>Consider the following example, which prohibits using trailing closure syntax to call <code>greet</code>: <pre><code>func greet(enthusiastically nameProvider: () -&gt; String) {\n    print(\"Hello, \\(nameProvider())! It's a pleasure to see you!\")\n}\nfunc greet(apathetically nameProvider: () -&gt; String) {\n    print(\"Oh, look. It's \\(nameProvider()).\")\n}\n\ngreet { \"John\" }  // arror: ambiguous use of 'greet'\n</code></pre> This example is fixed by differentiating some part of the function name other than the closure argument\u2014in this case, the base name: <pre><code>func greetEnthusiastically(_ nameProvider: () -&gt; String) {\n    print(\"Hello, \\(nameProvider())! It's a pleasure to see you!\")\n}\nfunc greetApathetically(_ nameProvider: () -&gt; String) {\n    print(\"Oh, look. It's \\(nameProvider()).\")\n}\n\ngreetEnthusiastically { \"John\" }\ngreetApathetically { \"not John\" }\n</code></pre> If a function call has multiple closure arguments, then none are called using trailing closure syntax; all are labeled and nested inside the argument list\u2019s parentheses.</p> <p>GOOD</p> <pre><code>UIView.animate(\n    withDuration: 0.5,\n    animations: {\n        // ...\n    },\n    completion: { finished in\n        // ...\n    }\n)\n\n// Use modern multiple trailing closure syntax.\n// The code reads like a native control flow statement.\nUIView.animate(withDuration: 0.5) {\n    // ...\n} completion: {  finished in\n    // ...\n}\n</code></pre> <p>AVOID</p> <pre><code>UIView.animate(\n    withDuration: 0.5,\n    animations: {\n        // ...\n    }) { finished in\n        // ...\n    }\n</code></pre> <p>If a function has a single closure argument and it is the final argument, then it is always called using trailing closure syntax, except in the following cases to resolve ambiguity or parsing errors: * As described above, labeled closure arguments must be used to disambiguate between two overloads with otherwise identical arguments lists. * Labeled closure arguments must be used in control flow statements where the body of the trailing closure would be parsed as the body of the control flow statement.</p> <p>GOOD</p> <pre><code>Timer.scheduledTimer(timeInterval: 30, repeats: false) { timer in\n    print(\"Timer done!\")\n}\nif let firstActive = list.first(where: { $0.isActive }) {\n    process(firstActive)\n}\n</code></pre> <p>AVOID</p> <pre><code>Timer.scheduledTimer(timeInterval: 30, repeats: false, block: { timer in\n    print(\"Timer done!\")\n})\n// This example fails to compile.\nif let firstActive = list.first { $0.isActive } {\n    process(firstActive)\n}\n</code></pre> <p>When a function called with trailing closure syntax takes no other arguments, empty parentheses (<code>()</code>) after the function name are never present.</p> <p>GOOD</p> <pre><code>let squares = [1, 2, 3].map { $0 * $0 }\n</code></pre> <p>AVOID</p> <pre><code>let squares = [1, 2, 3].map({ $0 * $0 })\nlet squares = [1, 2, 3].map() { $0 * $0 }\n</code></pre>"},{"location":"#trailing-commas","title":"Trailing Commas","text":"<p>Trailing commas in array and dictionary literals are forbidden. The last element in a multi-line literal must not have a comma following it.</p> <p>GOOD</p> <pre><code>let configurationKeys = [\n    \"bufferSize\",\n    \"compression\",\n    \"encoding\"\n]\n</code></pre> <p>AVOID</p> <pre><code>let configurationKeys = [\n    \"bufferSize\",\n    \"compression\",\n    \"encoding\",\n]\n</code></pre>"},{"location":"#numeric-literals","title":"Numeric Literals","text":"<p>It is recommended but not required that long numeric literals (decimal, hexadecimal, octal, and binary) use the underscore (<code>_</code>) separator to group digits for readability when the literal has numeric value or when there exists a domain-specific grouping.</p> <p>Recommended groupings are three digits for decimal (thousands separators), four digits for hexadecimal, four or eight digits for binary literals, or value-specific field boundaries when they exist (such as three digits for octal file permissions).</p> <p>Do not group digits if the literal is an opaque identifier that does not have a meaningful numeric value.</p>"},{"location":"#attributes","title":"Attributes","text":"<p>Parameterized attributes (such as <code>@availability(...)</code> or <code>@objc(...)</code>) are each written on their own line immediately before the declaration to which they apply, are lexicographically ordered, and are indented at the same level as the declaration.</p> <p>GOOD</p> <pre><code>@available(iOS 9.0, *)\npublic func coolNewFeature() {\n    // ...\n}\n</code></pre> <p>AVOID</p> <pre><code>@available(iOS 9.0, *) public func coolNewFeature() {\n    // ...\n}\n</code></pre>"},{"location":"#naming","title":"Naming","text":""},{"location":"#naming-conventions-are-not-access-control","title":"Naming Conventions Are Not Access Control","text":"<p>Restricted access control (<code>internal</code>, <code>fileprivate</code>, or <code>private</code>) is preferred for the purposes of hiding information from clients, rather than naming conventions.</p> <p>Naming conventions (such as prefixing a leading underscore) are only used in rare situations when a declaration must be given higher visibility than is otherwise desired in order to work around language limitations\u2014for example, a type that has a method that is only intended to be called by other parts of a library implementation that crosses module boundaries and must therefore be declared <code>public</code>.</p>"},{"location":"#identifiers","title":"Identifiers","text":"<p>In general, identifiers contain only 7-bit ASCII characters. Unicode identifiers are allowed if they have a clear and legitimate meaning in the problem domain of the code base (for example, Greek letters that represent mathematical concepts) and are well understood by the team who owns the code.</p> <p>GOOD</p> <pre><code>let smile = \"\ud83d\ude0a\"\nlet deltaX = newX - previousX\nlet \u0394x = newX - previousX\n</code></pre> <p>AVOID</p> <pre><code>let \ud83d\ude0a = \"\ud83d\ude0a\"\n</code></pre>"},{"location":"#initializers","title":"Initializers","text":"<p>For clarity, initializer arguments that correspond directly to a stored property have the same name as the property. Explicit <code>self.</code> is used during assignment to disambiguate them.</p> <p>GOOD</p> <pre><code>public struct CongratulationsViewData {\n    public let user: User\n    public let rewards: [Reward]\n\n    public init(user: User, rewards: [Reward]) {\n        self.user = user\n        self.rewards = rewards\n    }\n}\n</code></pre> <p>AVOID</p> <pre><code>public struct CongratulationsViewData {\n    public let user: User\n    public let rewards: [Reward]\n\n    public init(user otherUser: User, rewards otheRrewards: [Reward]) {\n        user = otherUser\n        rewards = otheRrewards\n    }\n}\n</code></pre>"},{"location":"#static-and-class-properties","title":"Static and Class Properties","text":"<p>Static and class properties that return instances of the declaring type are not suffixed with the name of the type.</p> <p>GOOD</p> <pre><code>public class UIColor {\n    public class var red: UIColor {\n        // ...\n    }\n}\n\npublic class URLSession {\n    public class var shared: URLSession {\n        // ...\n    }\n}\n</code></pre> <p>AVOID</p> <pre><code>public class UIColor {\n    public class var redColor: UIColor {\n        // ...\n    }\n}\n\npublic class URLSession {\n    public class var sharedSession: URLSession {\n        // ...\n    }\n}\n</code></pre> <p>When a static or class property evaluates to a singleton instance of the declaring type, the names <code>shared</code> and <code>default</code> are commonly used. This style guide does not require specific names for these; the author should choose a name that makes sense for the type.</p>"},{"location":"#global-constants","title":"Global Constants","text":"<p>Like other variables, global constants are <code>lowerCamelCase</code>. Hungarian notation, such as a leading <code>g</code> or <code>k</code>, is not used.</p> <p>GOOD</p> <pre><code>let secondsPerMinute = 60\n</code></pre> <p>AVOID</p> <pre><code>let SecondsPerMinute = 60\nlet kSecondsPerMinute = 60\nlet gSecondsPerMinute = 60\nlet SECONDS_PER_MINUTE = 60\n</code></pre>"},{"location":"#compiler-warnings","title":"Compiler Warnings","text":"<p>Code should compile without warnings when feasible. Any warnings that are able to be removed easily by the author must be removed.</p> <p>A reasonable exception is deprecation warnings, where it may not be possible to immediately migrate to the replacement API, or where an API may be deprecated for external users but must still be supported inside a library during a deprecation period.</p>"},{"location":"#properties_1","title":"Properties","text":"<p>The <code>get</code> block for a read-only computed property is omitted and its body is directly nested inside the property declaration.</p> <p>GOOD</p> <pre><code>var totalCost: Int {\n    return items.sum { $0.cost }\n}\n</code></pre> <p>AVOID</p> <pre><code>var totalCost: Int {\n    get {\n        return items.sum { $0.cost }\n    }\n}\n</code></pre>"},{"location":"#types-with-shorthand-names","title":"Types with Shorthand Names","text":"<p>Arrays, dictionaries, and optional types are written in their shorthand form whenever possible; that is, <code>[Element]</code>, <code>[Key: Value]</code>, and <code>Wrapped?</code>. The long forms <code>Array&lt;Element&gt;</code>, <code>Dictionary&lt;Key, Value&gt;</code>, and <code>Optional&lt;Wrapped&gt;</code> are only written when required by the compiler; for example, the Swift parser requires <code>Array&lt;Element&gt;.Index</code> and does not accept <code>[Element].Index</code>.</p> <p>GOOD</p> <pre><code>func enumeratedDictionary&lt;Element&gt;(\n    from values: [Element],\n    start: Array&lt;Element&gt;.Index? = nil) -&gt; [Int: Element] {\n    // ...\n}\n</code></pre> <p>AVOID</p> <pre><code>func enumeratedDictionary&lt;Element&gt;(\n    from values: Array&lt;Element&gt;,\n    start: Optional&lt;Array&lt;Element&gt;.Index&gt; = nil) -&gt; Dictionary&lt;Int, Element&gt; {\n    // ...\n}\n</code></pre> <p><code>Void</code> is a <code>typealias</code> for the empty tuple <code>()</code>, so from an implementation point of view they are equivalent. In function type declarations (such as closures, or variables holding a function reference), the return type is always written as <code>Void</code>, never as <code>()</code>. In functions declared with the <code>func</code> keyword, the <code>Void</code> return type is omitted entirely.</p> <p>Empty argument lists are always written as <code>()</code>, never as <code>Void</code>. (In fact, the function signature <code>Void -&gt; Result</code> is an error in Swift because function arguments must be surrounded by parentheses, and <code>(Void)</code> has a different meaning: an argument list with a single empty-tuple argument.)</p> <p>GOOD</p> <pre><code>func doSomething() {\n    // ...\n}\nlet callback: () -&gt; Void\n</code></pre> <p>AVOID</p> <pre><code>func doSomething() -&gt; Void {\n    // ...\n}\n\nfunc doSomething2() -&gt; () {\n    // ...\n}\nlet callback: () -&gt; ()\n</code></pre>"},{"location":"#optional-types","title":"Optional Types","text":"<p>Sentinel values are avoided when designing algorithms (for example, an \u201cindex\u201d of \u22121 when an element was not found in a collection). Sentinel values can easily and accidentally propagate through other layers of logic because the type system cannot distinguish between them and valid outcomes.</p> <p><code>Optional</code> is used to convey a non-error result that is either a value or the absence of a value. For example, when searching a collection for a value, not finding the value is still a valid and expected outcome, not an error.</p> <p>GOOD</p> <pre><code>func index(of thing: Thing, in things: [Thing]) -&gt; Int? {\n    // ...\n}\n\nif let index = index(of: thing, in: lotsOfThings) {\n    // Found it.\n} else {\n    // Didn't find it.\n}\n</code></pre> <p>AVOID</p> <pre><code>func index(of thing: Thing, in things: [Thing]) -&gt; Int {\n    // ...\n}\n\nlet index = index(of: thing, in: lotsOfThings)\nif index != -1 {\n    // Found it.\n} else {\n    // Didn't find it.\n}\n</code></pre> <p>Conditional statements that test that an <code>Optional</code> is non-nil but do not access the wrapped value are written as comparisons to <code>nil</code>. The following example is clear about the programmer\u2019s intent:</p> <p>GOOD</p> <pre><code>if value != nil {\n    print(\"value was not nil\")\n}\n</code></pre> <p>This example, while taking advantage of Swift\u2019s pattern matching and binding syntax, obfuscates the intent by appearing to unwrap the value and then immediately throw it away.</p> <p>AVOID</p> <pre><code>if let _ = value {\n    print(\"value was not nil\")\n}\n</code></pre>"},{"location":"#access-levels","title":"Access Levels","text":"<p>Omitting an explicit access level is permitted on declarations. For top-level declarations, the default access level is <code>internal</code>. For nested declarations, the default access level is the lesser of <code>internal</code> and the access level of the enclosing declaration.</p> <p>Specifying an explicit access level at the file level on an extension is forbidden. Each member of the extension has its access level specified if it is different than the default.</p> <p>GOOD</p> <pre><code>extension String {\n    public var isUppercase: Bool {\n        // ...\n    }\n\n    public var isLowercase: Bool {\n        // ...\n    }\n}\n</code></pre> <p>AVOID</p> <pre><code>public extension String {\n    var isUppercase: Bool {\n        // ...\n    }\n\n    var isLowercase: Bool {\n        // ...\n    }\n}\n</code></pre>"},{"location":"#nesting-and-namespacing","title":"Nesting and Namespacing","text":"<p>Swift allows <code>enums</code>, <code>structs</code>, and <code>classes to be nested, so nesting is preferred (instead of naming conventions) to express scoped and hierarchical relationships among types when possible. For example, flag</code>enums or error types that are associated with a specific type are nested in that type.</p> <p>GOOD</p> <pre><code>struct Parser {\n    enum Error: Swift.Error {\n        case invalidToken(String)\n        case unexpectedEOF\n    }\n\n    func parse(text: String) throws {\n        // ...\n    }\n}\n</code></pre> <p>AVOID</p> <pre><code>struct Parser {\n    func parse(text: String) throws {\n        // ...\n    }\n}\nenum ParseError: Error {\n    case invalidToken(String)\n    case unexpectedEOF\n}\n</code></pre> <p>Swift does not currently allow protocols to be nested in other types or vice versa, so this rule does not apply to situations such as the relationship between a controller class and its delegate protocol.</p> <p>Declaring an <code>enum</code> without cases is the canonical way to define a \u201cnamespace\u201d to group a set of related declarations, such as constants or helper functions. This <code>enum</code> automatically has no instances and does not require that extra boilerplate code be written to prevent instantiation.</p> <p>GOOD</p> <pre><code>enum Dimensions {\n    static let tileMargin: CGFloat = 8\n    static let tilePadding: CGFloat = 4\n    static let tileContentSize: CGSize(width: 80, height: 64)\n}\n</code></pre> <p>AVOID</p> <pre><code>struct Dimensions {\n    private init() {}\n\n    static let tileMargin: CGFloat = 8\n    static let tilePadding: CGFloat = 4\n    static let tileContentSize: CGSize(width: 80, height: 64)\n}\n</code></pre>"},{"location":"#for-where-loops","title":"for-where Loops","text":"<p>When the entirety of a for loop\u2019s body would be a single if block testing a condition of the element, the test is placed in the where clause of the for statement instead.</p> <p>GOOD</p> <pre><code>for item in collection where item.hasProperty {\n    // ...\n}\n</code></pre> <p>AVOID</p> <pre><code>for item in collection {\n    if item.hasProperty {\n        // ...\n    }\n}\n</code></pre>"},{"location":"#fallthrough-in-switch-statements","title":"fallthrough in switch Statements","text":"<p>When multiple cases of a switch would execute the same statements, the case patterns are combined into ranges or comma-delimited lists. Multiple case statements that do nothing but fallthrough to a case below are not allowed.</p> <p>GOOD</p> <pre><code>switch value {\ncase 1:\n    print(\"one\")\ncase 2...4:\n    print(\"two to four\")\ncase 5, 7:\n    print(\"five or seven\")\ndefault:\n    break\n}\n</code></pre> <p>AVOID</p> <pre><code>switch value {\ncase 1:\n    print(\"one\")\ncase 2:\n    fallthrough\n case 3:\n    fallthrough\ncase 4:\n    print(\"two to four\")\ncase 5:\n    fallthrough\ncase 7:\n    print(\"five or seven\")\ndefault:\n    break\n}\n</code></pre> <p>In other words, there is never a case whose body contains only the fallthrough statement. Cases containing additional statements which then fallthrough to the next case are permitted.</p>"},{"location":"#pattern-matching","title":"Pattern Matching","text":"<p>The placement of let and var keywords in a pattern depends on the number of values being bound within that pattern. - For patterns with a single binding, place the keyword directly before the variable (case .name(let value)). - For patterns with two or more bindings, use the shorthand version where the keyword precedes the entire pattern (case let .name(value1, value2)).</p> <p>This approach maintains clarity for simple, single-value cases while reducing verbosity and repetition in more complex cases with multiple values.</p> <p>GOOD</p> <pre><code>switch serverResponse {\ncase .success(let data):\n    print(\"Received (data.count) bytes.\")\ncase let .failure(code, message):\n    print(\"Error \\(code): \\(message)\")\ncase .notModified:\n    break\n}\n</code></pre> <p>AVOID</p> <pre><code>switch serverResponse {\ncase let .success(data):\n    print(\"Received (data.count) bytes.\")\ncase .failure(let code, let message):\n    print(\"Error \\(code): \\(message)\")\ncase .notModified:\n    break\n}\n</code></pre> <p>Labels of tuple arguments and enum associated values are omitted when binding a value to a variable with the same name as the label.</p> <p>GOOD</p> <pre><code>switch treeNode { \n    case .subtree(let left, let right): // ... \n    case .leaf(let element): // ... \n}\n</code></pre> <p>AVOID</p> <pre><code>// Including the labels adds redundant noise.\nswitch treeNode {\n    case .subtree(left: let left, right: let right): // ...\n    case .leaf(element: let element): // ...\n}\n</code></pre>"},{"location":"#tuple-patterns","title":"Tuple Patterns","text":"<p>Assigning variables through a tuple pattern is only permitted if the left-hand side of the assignment is unlabeled.</p> <p>GOOD</p> <pre><code>let (a, b) = (y: 4, x: 5.0)\n</code></pre> <p>AVOID</p> <pre><code>// Labels on the left-hand side resemble type annotations and can be confusing.\nlet (x: a, y: b) = (y: 4, x: 5.0)\n\n// This declares two variables: `Int` (which is a `Double`) and `Double` (which is an `Int`). `x` and `y` are not variables.\nlet (x: Int, y: Double) = (y: 4, x: 5.0)\n</code></pre>"},{"location":"#numeric-and-string-literals","title":"Numeric and String Literals","text":"<p>When a literal is used to initialize a value of a type other than its default, specify the type explicitly.</p> <p>GOOD</p> <pre><code>// These are explicitly typed.\nlet x2: Int32 = 50\nlet x3 = 50 as Int32\n\nlet y2: Character = \"a\"\nlet y3 = \"a\" as Character\n\n// GOOD. The compiler emits errors for invalid coercions, which is safe.\n// error: integer literal '...' overflows when stored into 'Int64'\nlet a = 0x8000_0000_0000_0000 as Int64\n// error: cannot convert value of type 'String' to type 'Character'\nlet b = \"ab\" as Character\n</code></pre> <p>AVOID</p> <pre><code>// Using initializer syntax can lead to misleading compiler errors or runtime errors.\n\n// This fails to compile because the literal doesn't fit into a signed `Int` first.\nlet a1 = UInt64(0x8000_0000_0000_0000)\n\n// This is significantly slower than coercion.\nlet b = Character(\"a\")\n\n// This traps at runtime.\nlet c = Character(\"ab\")\n</code></pre>"},{"location":"#trapping-vs-overflowing-arithmetic","title":"Trapping vs. Overflowing Arithmetic","text":"<p>The standard (trapping-on-overflow) arithmetic operators (+, -, *) are used for most normal operations.</p> <p>GOOD</p> <pre><code>//Overflow will not cause the balance to go negative.\nlet newBankBalance = oldBankBalance + recentHugeProfit\n</code></pre> <p>AVOID</p> <pre><code>//Overflow will cause the balance to wrap around, resulting in bad data.\nlet newBankBalance = oldBankBalance &amp;+ recentHugeProfit\n</code></pre> <p>Masking operations are permitted in domains that use modular arithmetic, such as cryptography and hash functions.</p> <p>GOOD</p> <pre><code>//For hash values, the distribution of the bit pattern matters.\nvar hashValue: Int {\n    return foo.hashValue &amp;+ 31 * (bar.hashValue &amp;+ 31 &amp;* baz.hashValue)\n}\n</code></pre> <p>AVOID</p> <pre><code>//This will trap unpredictably depending on the hash values.\nvar hashValue: Int {\n    return foo.hashValue + 31 * (bar.hashValue + 31 * baz.hashValue)\n}\n</code></pre>"},{"location":"#documentation-comments","title":"Documentation Comments","text":"<p>General Format</p> <p>Documentation comments are written using the triple slash (///). Javadoc-style block comments (/* ... /) are not permitted.</p> <p>GOOD</p> <pre><code>/// Returns the numeric value of the given digit.\n///\n/// - Parameters:\n///   - digit: The Unicode scalar whose numeric value should be returned.\n///   - radix: The radix used to compute the numeric value.\n/// - Returns: The numeric value of the scalar.\nfunc numericValue(of digit: UnicodeScalar, radix: Int = 10) -&gt; Int {\n    // ...\n}\n</code></pre> <p>AVOID</p> <pre><code>/**\n * Returns the numeric value of the given digit.\n */\nfunc numericValue(of digit: UnicodeScalar, radix: Int = 10) -&gt; Int {\n  // ...\n}\n</code></pre>"},{"location":"#single-sentence-summary","title":"Single-Sentence Summary","text":"<p>Documentation comments begin with a brief single-sentence summary. Method summaries are verb phrases; property summaries are noun phrases.</p> <p>GOOD</p> <pre><code>/// The background color of the view.\nvar backgroundColor: UIColor\n\n/// Returns the sum of the numbers in the given array.\nfunc sum(_ numbers: [Int]) -&gt; Int {\n    // ...\n}\n</code></pre> <p>AVOID</p> <pre><code>/// This property is the background color of the view.\nvar backgroundColor: UIColor\n\n/// This method returns the sum of the numbers in the given array.\nfunc sum(_ numbers: [Int]) -&gt; Int {\n  // ...\n}\n</code></pre>"},{"location":"#higher-order-functions-for-collections","title":"Higher-Order Functions for Collections","text":"<p>Prefer using higher-order functions like map, filter, reduce, and flatMap for common collection operations over constructing manual for-in loops. This practice leads to more declarative, concise, and readable code by clearly stating the transformation's intent rather than the step-by-step mechanics of its implementation. It also avoids the boilerplate of creating and mutating intermediate collections.</p> <p>Furthermore, for transformations that simply access a property of an element, you can use the even more concise KeyPath expression (.propertyName). This further improves readability by directly referencing the property being mapped.</p> <p>GOOD</p> <pre><code>// The intent\u2014transforming and filtering\u2014is immediately clear.\nlet squaredEvens = numbers.map { $0 * $0 }.filter { $0 % 2 == 0 }\n\n// Using a KeyPath is the most direct way to extract properties.\nlet userNames = users.map(\\.name)\n</code></pre> <p>AVOID</p> <pre><code>// This imperative approach requires more code and mental overhead to understand. \nvar squaredEvens: [Int] = []\n\nfor number in numbers {\n    let squared = number * number if squared % 2 == 0 { squaredEvens.append(squared) } \n} \n</code></pre>"},{"location":"#transforming-optionals-with-map-and-flatmap","title":"Transforming Optionals with map and flatMap","text":"<p>Prefer map and flatMap to perform transformations on optional values rather than using verbose if let or guard let statements. This approach produces more concise, declarative code by chaining the operation directly to the optional value itself.</p> <p>Use map when your transformation function returns a non-optional value. Use flatMap when your transformation function returns an Optional value; this prevents creating a nested optional (e.g., Int??).</p> <p>GOOD</p> <pre><code>// 'map' is used because the transform returns a non-optional String.\nlet optionalNumber: Int? = 42\nlet optionalDescription = optionalNumber.map { \"The number is ($0)\" }\n\n// 'flatMap' is used because `Int(String)` returns an `Int?`.\nlet optionalString: String? = \"123\"\nlet optionalInt = optionalString.flatMap { Int($0) }\n</code></pre> <p>AVOID</p> <pre><code>// Unnecessarily verbose for a simple transformation.\nlet optionalNumber: Int? = 42\nlet optionalDescription: String?\n\nif let number = optionalNumber {\n    optionalDescription = \"The number is (number)\"\n} else {\n    optionalDescription = nil\n}\n\n// This guard statement adds boilerplate that `flatMap` handles automatically.\nguard let string = optionalString else {\n    return nil\n}\nlet optionalInt = Int(string)\n</code></pre>"},{"location":"#acronyms-and-initialisms","title":"Acronyms and Initialisms","text":"<p>Names containing common acronyms and initialisms (such as URL, ID, API, or HTTP) should treat the acronym as a single word, keeping it fully capitalized. This applies to both UpperCamelCase type names and lowerCamelCase variable names. Avoid using mixed-case variants.</p> <p>This practice improves clarity by treating well-known acronyms as indivisible units, which is how developers mentally read them.</p> <p>GOOD</p> <pre><code>var requestURL: URL\nlet userID: Int\nlet htmlContent: String\n\nstruct APIClient {\n    func downloadHTML() { ... }\n}\n</code></pre> <p>AVOID</p> <pre><code>// Avoid mixed-case or partially-lowercased acronyms.\nvar requestUrl: URL\nlet userId: Int\nlet anHtmlDocument: String\n\nstruct ApiClient {\n    func downloadHtml() { ... }\n}\n</code></pre>"},{"location":"#use-type-aliases-for-clarity","title":"Use Type Aliases for Clarity","text":"<p>Actively use type aliases (typealias) to give simpler, more descriptive names to complex types. This is especially useful for tuples, closures, and generic types with multiple constraints. Using a type alias makes code more readable, self-documenting, and easier to maintain.</p> <p>A well-named type alias can express the purpose of a complex type, making function signatures and property declarations much clearer.</p> <p>GOOD</p> <pre><code>// The type alias clearly defines the structure and purpose.\ntypealias HTTPResponse = (data: Data?, response: URLResponse?, error: Error?)\n\nfunc handle(response: HTTPResponse) {\n    response.data.map { data in\n        // ...\n    }\n}\n\ntypealias UserFetchCompletion = (Result&lt;[User], APIError&gt;) -&gt; Void\n\nfunc fetchUsers(completion: @escaping UserFetchCompletion) {\n    // ...\n}\n</code></pre> <p>AVOID</p> <pre><code>// The complex, inline tuple makes the function signature hard to read.\nfunc handle(response: (data: Data?, response: URLResponse?, error: Error?)) {\n    // ...\n}\n\n// The closure's purpose is not immediately clear from the signature.\nfunc fetchUsers(completion: @escaping (Result&lt;[User], APIError&gt;) -&gt; Void) {\n    // ...\n}\n</code></pre>"},{"location":"#implicit-returns","title":"Implicit Returns","text":"<p>You should omit the return keyword in functions, computed properties, and closures that are composed of a single expression. The return keyword should only be used when the compiler requires it, for instance, in bodies that contain multiple statements or other declarations.</p> <p>This practice leverages a modern Swift feature that reduces boilerplate and improves conciseness, making the code's intent clearer. \ud83d\udcdc</p> <p>GOOD</p> <pre><code>// For a single-line computed property\nvar isEnabled: Bool {\n    !items.isEmpty\n}\n\n// For a single-expression function\nfunc square(of number: Int) -&gt; Int {\n    number * number\n}\n\n// For a switch statement that is a single expression in a function\nfunc color(for state: ConnectionState) -&gt; UIColor {\n    switch state {\n        case .connected: .green\n        case .disconnected: .red\n        case .connecting: .yellow\n    }\n}\n</code></pre> <p>AVOID</p> <pre><code>// The return keyword is redundant here.\nvar isEnabled: Bool {\n    return !items.isEmpty\n}\n\n// The `return` keyword is unnecessary in a single-expression function.\nfunc square(of number: Int) -&gt; Int {\n    return number * number\n}\n\n// Each case is a single expression, so `return` is not needed.\nfunc color(for state: ConnectionState) -&gt; UIColor {\n    switch state {\n        case .connected: return .green\n        case .disconnected: return .red\n        case .connecting: return .yellow\n    }\n}\n</code></pre>"},{"location":"#ternary-operators","title":"Ternary Operators","text":"<p>When a ternary expression (? :) needs to be line-wrapped, a line break is inserted before both the ? and the :. The continuation lines containing these operators are indented exactly +4 from the original line.</p> <p>This style ensures that all three parts of the expression\u2014the condition, the true case, and the false case\u2014are clearly separated and aligned, which greatly improves readability.</p> <p>GOOD</p> <pre><code>let accessLevel = user.isAdministrator\n    ? \"Administrator\"\n    : \"Standard User\"\n\nlet color = isEnabled\n    ? .primary\n    : .secondary.withAlphaComponent(0.5)\n</code></pre> <p>AVOID</p> <pre><code>// Placing operators at the end of the line makes it harder to scan.\nlet accessLevel = user.isAdministrator ?\n\"Administrator\" :\n\"Standard User\"\n\n// This inconsistent indentation is confusing.\nlet color = isEnabled ? .primary\n    : .secondary.withAlphaComponent(0.5)\n</code></pre>"},{"location":"#abbreviations-in-names","title":"Abbreviations in Names","text":"<p>Type names (classes, structs, protocols, enums) must be fully spelled out. Avoid abbreviations to make the API as clear and self-documenting as possible. A type's name should fully describe its purpose without requiring a reader to guess what an abbreviation stands for.</p> <p>However, property and local variable names may use common, contextually-clear abbreviations (such as btn, img, mgr, config). This avoids excessive verbosity within the implementation where the context is already established.</p> <p>GOOD</p> <pre><code>// The class name is fully spelled out for clarity.\nstruct UserProfile {\n    // Within the implementation, abbreviations for button color and manager are acceptable.\n    private var btnColor: Color\n    private let configManager: ConfigurationManager\n\n    // ...\n}\n</code></pre> <p>AVOID</p> <pre><code>// The class name is unclear due to abbreviations. What is \"VC\"? \"Usr\"? \"Prof\"?\nstruct UsrProfVC {\n    // The property name is unnecessarily long and verbose.\n    private var buttonBackgroundColor: Color\n    private let configurationManagerInstance: ConfigurationManager\n\n    // ...\n}\n</code></pre>"},{"location":"#numeric-suffixes-in-names","title":"Numeric Suffixes in Names","text":"<p>Avoid appending arbitrary numbers to the names of types such as classes, structs, protocols, and enums. A type's name should describe its purpose or domain, not its sequence or version. If you need variants of a type, prefer more descriptive names or use generics.</p> <p>However, using numeric suffixes for properties or local variables is permissible when it is part of a well-defined, non-arbitrary sequence (e.g., coordinates, versioned assets, or mathematical components).</p> <p>GOOD</p> <pre><code>struct LineSegment { \n    var point1: CGPoint \n    var point2: CGPoint \n}\n\nlet themeColor1: Color\nlet themeColor2: Color\n</code></pre> <p>AVOID</p> <pre><code>// AVOID: Type names should not be numbered. This creates confusion\n// about the relationship between UserV1 and UserV2.\n// Prefer a single User type with a version property, or use protocols.\nclass UserV1 { ... }\nclass UserV2 { ... }\n</code></pre>"},{"location":"#parameter-returns-and-throws-tags","title":"Parameter, Returns, and Throws Tags","text":"<p>Use the singular - Parameter tag for a single argument. Use the plural - Parameters tag with a nested list for multiple arguments.</p> <p>GOOD</p> <pre><code>/// - Parameter command: The command to execute.\nfunc execute(command: String) -&gt; String { ... }\n\n/// - Parameters:\n///   - command: The command to execute.\n///   - stdin: The string to use as standard input.\nfunc execute(command: String, stdin: String) -&gt; String { ... }\n</code></pre> <p>AVOID</p> <p><pre><code>// Using the plural form for a single parameter.\n/// - Parameters:\n///   - command: The command to execute.\nfunc execute(command: String) -&gt; String { ... }\n\n// Using the singular form multiple times.\n/// - Parameter command: The command to execute.\n/// - Parameter stdin: The string to use as standard input.\nfunc execute(command: String, stdin: String) -&gt; String { ... }\n</code></pre> Of course. Here is a new rule formatted in the style of the provided document, ready to be added to the Programming Practices section.</p>"},{"location":"#special-escape-sequences","title":"Special Escape Sequences","text":"<p>For any character that has a special escape sequence (<code>\\t</code>, <code>\\n</code>, <code>\\r</code>, <code>\\\"</code>, <code>\\'</code>, <code>\\\\</code>, and <code>\\0</code>), that sequence is used rather than the equivalent Unicode (e.g., <code>\\u{000a}</code>) escape sequence.</p>"},{"location":"#file-header-comments","title":"File Header Comments","text":"<p>The boilerplate header comment block automatically added by Xcode to new files should be deleted.</p> <p>This information, such as the author's name and creation date, is redundant. The version control system (e.g., Git) is the canonical source for a file's history and authorship. Removing this header reduces noise and keeps the focus on the actual code.</p>"}]}